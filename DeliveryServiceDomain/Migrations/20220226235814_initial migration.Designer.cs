// <auto-generated />
using System;
using DeliveryServiceDomain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeliveryServiceDomain.Migrations
{
    [DbContext(typeof(DeliveryServiceContext))]
    [Migration("20220226235814_initial migration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalService", b =>
                {
                    b.Property<int>("AdditionalServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdditionalServiceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalServiceName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("AdditionalServiceName");

                    b.Property<double>("AdditionalServicePrice")
                        .HasColumnType("float")
                        .HasColumnName("AdditionalServicePrice");

                    b.HasKey("AdditionalServiceId");

                    b.ToTable("AdditionalService");

                    b.HasData(
                        new
                        {
                            AdditionalServiceId = 1,
                            AdditionalServiceName = "Potpisana otpremnica",
                            AdditionalServicePrice = 50.0
                        },
                        new
                        {
                            AdditionalServiceId = 2,
                            AdditionalServiceName = "Povratnica",
                            AdditionalServicePrice = 50.0
                        },
                        new
                        {
                            AdditionalServiceId = 3,
                            AdditionalServiceName = "Dodatna ambalaza",
                            AdditionalServicePrice = 60.0
                        },
                        new
                        {
                            AdditionalServiceId = 4,
                            AdditionalServiceName = "Lično uručenje",
                            AdditionalServicePrice = 60.0
                        },
                        new
                        {
                            AdditionalServiceId = 5,
                            AdditionalServiceName = "Osiguranje vrednosti",
                            AdditionalServicePrice = 80.0
                        },
                        new
                        {
                            AdditionalServiceId = 6,
                            AdditionalServiceName = "Email izveštaj",
                            AdditionalServicePrice = 30.0
                        },
                        new
                        {
                            AdditionalServiceId = 7,
                            AdditionalServiceName = "SMS izveštaj",
                            AdditionalServicePrice = 30.0
                        },
                        new
                        {
                            AdditionalServiceId = 8,
                            AdditionalServiceName = "Uručenje danas za sutra do 12h",
                            AdditionalServicePrice = 90.0
                        },
                        new
                        {
                            AdditionalServiceId = 9,
                            AdditionalServiceName = "Uručenje danas za sutra do 19h",
                            AdditionalServicePrice = 70.0
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalServiceShipment", b =>
                {
                    b.Property<int>("AdditionalServiceId")
                        .HasColumnType("int")
                        .HasColumnName("AdditionalServiceId");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentId");

                    b.HasKey("AdditionalServiceId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("AdditionalServiceShipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LocationName");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Username");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipmentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DelivererId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DelivererId")
                        .HasDefaultValueSql("(CONVERT([int],session_context(N'PersonId')))");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Note");

                    b.Property<string>("PostalNo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PostalNo");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Price");

                    b.Property<int>("ReceivingLocationId")
                        .HasColumnType("int")
                        .HasColumnName("ReceivingLocationId");

                    b.Property<int>("SendingLocationId")
                        .HasColumnType("int")
                        .HasColumnName("SendingLocationId");

                    b.Property<string>("ShipmentCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ShipmentCode");

                    b.Property<string>("ShipmentContent")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ShipmentContent");

                    b.Property<int>("ShipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentTypeId");

                    b.Property<double>("ShipmentWeight")
                        .HasColumnType("float")
                        .HasColumnName("ShipmentWeight");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Street");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasDefaultValueSql("(CONVERT([int],session_context(N'PersonId')))");

                    b.HasKey("ShipmentId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("ReceivingLocationId");

                    b.HasIndex("SendingLocationId");

                    b.HasIndex("ShipmentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.ShipmentType", b =>
                {
                    b.Property<int>("ShipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipmentTypeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShipmentTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ShipmentTypeName");

                    b.Property<double>("ShipmentTypePrice")
                        .HasColumnType("float")
                        .HasColumnName("ShipmentTypePrice");

                    b.HasKey("ShipmentTypeId");

                    b.ToTable("ShipmentTypes");

                    b.HasData(
                        new
                        {
                            ShipmentTypeId = 1,
                            ShipmentTypeName = "Standardna",
                            ShipmentTypePrice = 220.0
                        },
                        new
                        {
                            ShipmentTypeId = 2,
                            ShipmentTypeName = "Specijalna",
                            ShipmentTypePrice = 350.0
                        },
                        new
                        {
                            ShipmentTypeId = 3,
                            ShipmentTypeName = "Međunarodna",
                            ShipmentTypePrice = 900.0
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("StatusName");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Zakazana"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Na pakovanju"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Uskladištena za slanje"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Kod kurira"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "U transportu"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Uručena"
                        },
                        new
                        {
                            StatusId = 7,
                            StatusName = "Uskladištena na čekanju"
                        },
                        new
                        {
                            StatusId = 8,
                            StatusName = "Odbijena"
                        },
                        new
                        {
                            StatusId = 9,
                            StatusName = "Vraćena pošiljaocu"
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.StatusShipment", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentId");

                    b.Property<DateTime>("StatusTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("StatusTime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StatusId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("StatusShipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Deliverer", b =>
                {
                    b.HasBaseType("DeliveryServiceDomain.Person");

                    b.ToTable("Deliverers");

                    b.HasData(
                        new
                        {
                            PersonId = 3,
                            FirstName = "Nastasja",
                            LastName = "Bakovic",
                            Password = "N4st4sj4",
                            Username = "nastasja"
                        },
                        new
                        {
                            PersonId = 4,
                            FirstName = "Stefan",
                            LastName = "Antic",
                            Password = "ant33",
                            Username = "stefan"
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.User", b =>
                {
                    b.HasBaseType("DeliveryServiceDomain.Person");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PhoneNumber");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            FirstName = "Pera",
                            LastName = "Peric",
                            Password = "per1c4",
                            Username = "perica",
                            PhoneNumber = "065/111-222-33"
                        },
                        new
                        {
                            PersonId = 2,
                            FirstName = "Zika",
                            LastName = "Zikic",
                            Password = "z1k1c4",
                            Username = "zikica",
                            PhoneNumber = "064/444-555-66"
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalServiceShipment", b =>
                {
                    b.HasOne("DeliveryServiceDomain.AdditionalService", "AdditionalService")
                        .WithMany("Shipments")
                        .HasForeignKey("AdditionalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Shipment", "Shipment")
                        .WithMany("AdditionalServices")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdditionalService");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Shipment", b =>
                {
                    b.HasOne("DeliveryServiceDomain.Deliverer", "Deliverer")
                        .WithMany("Shipments")
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Location", "ReceivingLocation")
                        .WithMany("ReceivingShipments")
                        .HasForeignKey("ReceivingLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Location", "SendingLocation")
                        .WithMany("SendingShipments")
                        .HasForeignKey("SendingLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.ShipmentType", "ShipmentType")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.User", "User")
                        .WithMany("Shipments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deliverer");

                    b.Navigation("ReceivingLocation");

                    b.Navigation("SendingLocation");

                    b.Navigation("ShipmentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeliveryServiceDomain.StatusShipment", b =>
                {
                    b.HasOne("DeliveryServiceDomain.Shipment", "Shipment")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Status", "Status")
                        .WithMany("Shipments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Deliverer", b =>
                {
                    b.HasOne("DeliveryServiceDomain.Person", null)
                        .WithOne()
                        .HasForeignKey("DeliveryServiceDomain.Deliverer", "PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeliveryServiceDomain.User", b =>
                {
                    b.HasOne("DeliveryServiceDomain.Person", null)
                        .WithOne()
                        .HasForeignKey("DeliveryServiceDomain.User", "PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalService", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Location", b =>
                {
                    b.Navigation("ReceivingShipments");

                    b.Navigation("SendingShipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Shipment", b =>
                {
                    b.Navigation("AdditionalServices");

                    b.Navigation("ShipmentStatuses");
                });

            modelBuilder.Entity("DeliveryServiceDomain.ShipmentType", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Status", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Deliverer", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.User", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
