// <auto-generated />
using System;
using DeliveryServiceDomain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeliveryServiceDomain.Migrations
{
    [DbContext(typeof(DeliveryServiceContext))]
    [Migration("20220322210045_set deliveredId as optional")]
    partial class setdeliveredIdasoptional
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalService", b =>
                {
                    b.Property<int>("AdditionalServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdditionalServiceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalServiceName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("AdditionalServiceName");

                    b.Property<double>("AdditionalServicePrice")
                        .HasColumnType("float")
                        .HasColumnName("AdditionalServicePrice");

                    b.HasKey("AdditionalServiceId");

                    b.ToTable("AdditionalService");

                    b.HasData(
                        new
                        {
                            AdditionalServiceId = 1,
                            AdditionalServiceName = "Signed delivery note",
                            AdditionalServicePrice = 50.0
                        },
                        new
                        {
                            AdditionalServiceId = 2,
                            AdditionalServiceName = "Return receipt",
                            AdditionalServicePrice = 50.0
                        },
                        new
                        {
                            AdditionalServiceId = 3,
                            AdditionalServiceName = "Additional packaging",
                            AdditionalServicePrice = 60.0
                        },
                        new
                        {
                            AdditionalServiceId = 4,
                            AdditionalServiceName = "Personal delivery",
                            AdditionalServicePrice = 60.0
                        },
                        new
                        {
                            AdditionalServiceId = 5,
                            AdditionalServiceName = "Value insurance",
                            AdditionalServicePrice = 80.0
                        },
                        new
                        {
                            AdditionalServiceId = 6,
                            AdditionalServiceName = "Email report",
                            AdditionalServicePrice = 30.0
                        },
                        new
                        {
                            AdditionalServiceId = 7,
                            AdditionalServiceName = "SMS report",
                            AdditionalServicePrice = 30.0
                        },
                        new
                        {
                            AdditionalServiceId = 8,
                            AdditionalServiceName = "Delivery today for tomorrow until 12h",
                            AdditionalServicePrice = 90.0
                        },
                        new
                        {
                            AdditionalServiceId = 9,
                            AdditionalServiceName = "Delivery today for tomorrow until 19h",
                            AdditionalServicePrice = 70.0
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalServiceShipment", b =>
                {
                    b.Property<int>("AdditionalServiceId")
                        .HasColumnType("int")
                        .HasColumnName("AdditionalServiceId");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentId");

                    b.HasKey("AdditionalServiceId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("AdditionalServiceShipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Deliverer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deliverer");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipmentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ContactPersonName");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ContactPersonPhone");

                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasDefaultValueSql("(CONVERT([int],session_context(N'PersonId')))");

                    b.Property<int>("DelivererId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DelivererId")
                        .HasDefaultValueSql("(CONVERT([int],session_context(N'PersonId')))");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Note");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Price");

                    b.Property<string>("ReceivingAddress")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ReceivingAddress");

                    b.Property<string>("ReceivingCity")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ReceivingCity");

                    b.Property<string>("ReceivingPostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ReceivingPostalCode");

                    b.Property<string>("SendingAddress")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("SendingAddress");

                    b.Property<string>("SendingCity")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("SendingCity");

                    b.Property<string>("SendingPostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("SendingPostalCode");

                    b.Property<string>("ShipmentCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ShipmentCode");

                    b.Property<string>("ShipmentContent")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ShipmentContent");

                    b.Property<int>("ShipmentWeightId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentWeightId");

                    b.HasKey("ShipmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("ShipmentWeightId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.ShipmentWeight", b =>
                {
                    b.Property<int>("ShipmentWeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipmentWeightId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShipmentWeightDescpription")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Desc");

                    b.Property<double>("ShipmentWeightPrice")
                        .HasColumnType("float")
                        .HasColumnName("ShipmentWeightPrice");

                    b.HasKey("ShipmentWeightId");

                    b.ToTable("ShipmentWeight");

                    b.HasData(
                        new
                        {
                            ShipmentWeightId = 1,
                            ShipmentWeightDescpription = "Up to 0,5 kg",
                            ShipmentWeightPrice = 250.0
                        },
                        new
                        {
                            ShipmentWeightId = 2,
                            ShipmentWeightDescpription = "Over 0,5 to 2kg",
                            ShipmentWeightPrice = 300.0
                        },
                        new
                        {
                            ShipmentWeightId = 3,
                            ShipmentWeightDescpription = "Over 2 to 5kg",
                            ShipmentWeightPrice = 390.0
                        },
                        new
                        {
                            ShipmentWeightId = 4,
                            ShipmentWeightDescpription = "Over 5 to 10kg",
                            ShipmentWeightPrice = 510.0
                        },
                        new
                        {
                            ShipmentWeightId = 5,
                            ShipmentWeightDescpription = "Over 10 to 20kg",
                            ShipmentWeightPrice = 700.0
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("StatusName");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Scheduled"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "On the packaging"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Stored for shipping"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "At the courier"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "In transport"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Delivered"
                        },
                        new
                        {
                            StatusId = 7,
                            StatusName = "Stored on hold"
                        },
                        new
                        {
                            StatusId = 8,
                            StatusName = "Rejected"
                        },
                        new
                        {
                            StatusId = 9,
                            StatusName = "Returned to sender"
                        });
                });

            modelBuilder.Entity("DeliveryServiceDomain.StatusShipment", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentId");

                    b.Property<DateTime>("StatusTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("StatusTime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StatusId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("StatusShipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalServiceShipment", b =>
                {
                    b.HasOne("DeliveryServiceDomain.AdditionalService", "AdditionalService")
                        .WithMany("Shipments")
                        .HasForeignKey("AdditionalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Shipment", "Shipment")
                        .WithMany("AdditionalServices")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdditionalService");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Shipment", b =>
                {
                    b.HasOne("DeliveryServiceDomain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Deliverer", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.ShipmentWeight", "ShipmentWeight")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipmentWeightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Deliverer");

                    b.Navigation("ShipmentWeight");
                });

            modelBuilder.Entity("DeliveryServiceDomain.StatusShipment", b =>
                {
                    b.HasOne("DeliveryServiceDomain.Shipment", "Shipment")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeliveryServiceDomain.Status", "Status")
                        .WithMany("Shipments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DeliveryServiceDomain.AdditionalService", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Shipment", b =>
                {
                    b.Navigation("AdditionalServices");

                    b.Navigation("ShipmentStatuses");
                });

            modelBuilder.Entity("DeliveryServiceDomain.ShipmentWeight", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("DeliveryServiceDomain.Status", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
